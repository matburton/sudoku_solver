[
  {
    "id":"84106315.1f7938",
    "type":"inject",
    "name":"Debug puzzle",
    "topic":"",
    "payload":"000000010400000000020000000000050407008000300001090000300400200050100000000806000",
    "repeat":"",
    "crontab":"",
    "once":false,
    "x":199.26984405517578,
    "y":44.523813247680664,
    "wires":[
      [
        "31bafc7f.ce76c4"
      ]
    ]
  },
  {
    "id":"bb373141.93898",
    "type":"function",
    "name":"Parse puzzle",
    "func":"\n// TODO: Turn the puzzle into a grid. This\n// requires having a global notion of a of \n// a grid complete with basic possibility\n// elimination functionality. This code will\n// have to live either outside the flow or be\n// added during the flow to the global context\n\n// TODO: In the future allow the puzzle to be\n// either a line or a grid array of arrays.\n// Each could be in their own function node\n\n// TODO: Take second branch if the puzzle is invalid\n\nreturn null;",
    "outputs":"2",
    "x":509.2698211669922,
    "y":64.74604034423828,
    "wires":[
      [
        "a58a856b.5a7578",
        "fab7e7ba.054818"
      ],
      [
        "cc28df94.33d72"
      ]
    ]
  },
  {
    "id":"ff3b4cee.409598",
    "type":"http in",
    "name":"POST",
    "url":"/sudoku/puzzle/solve",
    "method":"post",
    "x":54.26984405517578,
    "y":68.52381324768066,
    "wires":[
      [
        "53c729de.ac38d8"
      ]
    ]
  },
  {
    "id":"861d381.b07acc8",
    "type":"http in",
    "name":"PUT",
    "url":"/sudoku/puzzle/solve",
    "method":"put",
    "x":54.26984405517578,
    "y":108.52381324768066,
    "wires":[
      [
        "53c729de.ac38d8"
      ]
    ]
  },
  {
    "id":"31bafc7f.ce76c4",
    "type":"function",
    "name":"Load grid code",
    "func":"\n// TODO: Perhaps the shared notion and\n// functionality of a grid should be\n// added to the global context here?\n\nreturn msg;",
    "outputs":1,
    "x":353.1587219238281,
    "y":64.74603843688965,
    "wires":[
      [
        "bb373141.93898"
      ]
    ]
  },
  {
    "id":"457c51c0.e5f4",
    "type":"function",
    "name":"Refine top grid",
    "func":"\n// TODO: Here we need to find a refinement on the\n// first grid provided if it isn't already and is\n// still possible. Once a refinement is found the\n// first output can be taken to cause a refinement\n// loop. If no refinement is found the second\n// output should be taken to cause the grid to be\n// split. If the grid is complete or isn't\n// possible then second output should be taken\n\n// TODO: Is this doing to much?\n// Can we split the possible/complete checks into\n// their own nodes?\n\n// TODO: Can we split the deduction steps into their own nodes?\n\nreturn null;",
    "outputs":"2",
    "x":739.2698211669922,
    "y":184.74605560302734,
    "wires":[
      [
        "a58a856b.5a7578",
        "8d5132df.72aed"
      ],
      [
        "65685430.9163f4"
      ]
    ]
  },
  {
    "id":"65685430.9163f4",
    "type":"function",
    "name":"Split top grid",
    "func":"\nreturn null;",
    "outputs":"1",
    "x":920.2698211669922,
    "y":190.74605560302734,
    "wires":[
      [
        "a58a856b.5a7578",
        "c047790a.3fb888"
      ]
    ]
  },
  {
    "id":"53c729de.ac38d8",
    "type":"function",
    "name":"Parse request",
    "func":"\nvar request = msg.req.body;\n\nmsg.payload = request.puzzle;\n\nreturn msg;",
    "outputs":1,
    "x":196.26984405517578,
    "y":85.52381324768066,
    "wires":[
      [
        "31bafc7f.ce76c4",
        "186801db.e797fe"
      ]
    ]
  },
  {
    "id":"a58a856b.5a7578",
    "type":"function",
    "name":"Top grid complete?",
    "func":"\nreturn null;",
    "outputs":"2",
    "x":742.7142791748047,
    "y":58.857139587402344,
    "wires":[
      [
        "e79c6ce.f18639"
      ],
      [
        "7c9af193.83651"
      ]
    ]
  },
  {
    "id":"7c9af193.83651",
    "type":"function",
    "name":"Top grid possible?",
    "func":"\nreturn null;",
    "outputs":"2",
    "x":562.7142791748047,
    "y":201.85713958740234,
    "wires":[
      [
        "457c51c0.e5f4"
      ],
      [
        "814c74a8.7eb388",
        "415aa01b.bea56"
      ]
    ]
  },
  {
    "id":"814c74a8.7eb388",
    "type":"function",
    "name":"Discard top grid",
    "func":"\nreturn null;",
    "outputs":1,
    "x":849.7142791748047,
    "y":229.85713958740234,
    "wires":[
      [
        "a8e13d13.571ec"
      ]
    ]
  },
  {
    "id":"a8e13d13.571ec",
    "type":"function",
    "name":"Any grids left?",
    "func":"\nreturn null;",
    "outputs":"2",
    "x":1025.7142791748047,
    "y":229.85713958740234,
    "wires":[
      [
        "a58a856b.5a7578"
      ],
      [
        "39ef8cf2.c61074"
      ]
    ]
  },
  {
    "id":"e79c6ce.f18639",
    "type":"function",
    "name":"Format solution",
    "func":"\n// TODO: Should check if we have an open HTTP\n// request and take the second branch only if\n// there is one? Or can we just take it anyway?\n\nreturn null;",
    "outputs":1,
    "x":944.0010223388672,
    "y":52.99700164794922,
    "wires":[
      [
        "1ce91733.e316e9",
        "b9065e5.f46f9a"
      ]
    ]
  },
  {
    "id":"39ef8cf2.c61074",
    "type":"function",
    "name":"Negative response",
    "func":"\n// TODO: Should check if we have an open HTTP\n// request and take the second branch only if\n// there is one? Or can we just take it anyway?\n\nreturn null;",
    "outputs":1,
    "x":1224.7142791748047,
    "y":235.85713958740234,
    "wires":[
      [
        "1ce91733.e316e9",
        "9f80d123.607f3"
      ]
    ]
  },
  {
    "id":"1ce91733.e316e9",
    "type":"http response",
    "name":"HTTP response",
    "x":1144.7913055419922,
    "y":71.62635803222656,
    "wires":[

    ]
  },
  {
    "id":"14fd4a8b.eb02b5",
    "type":"http response",
    "name":"HTTP response",
    "x":364.7142791748047,
    "y":170.85713958740234,
    "wires":[

    ]
  },
  {
    "id":"cc28df94.33d72",
    "type":"function",
    "name":"Bad request",
    "func":"\nreturn null;",
    "outputs":"1",
    "x":208.7142791748047,
    "y":189.85713958740234,
    "wires":[
      [
        "14fd4a8b.eb02b5",
        "f71b04a3.08e4f8"
      ]
    ]
  },
  {
    "id":"186801db.e797fe",
    "type":"debug",
    "name":"Debug",
    "active":true,
    "complete":"false",
    "x":334.7142791748047,
    "y":102.85713958740234,
    "wires":[

    ]
  },
  {
    "id":"f71b04a3.08e4f8",
    "type":"debug",
    "name":"Debug",
    "active":true,
    "complete":"false",
    "x":344.7142791748047,
    "y":209.85713958740234,
    "wires":[

    ]
  },
  {
    "id":"415aa01b.bea56",
    "type":"debug",
    "name":"Debug",
    "active":true,
    "complete":"false",
    "x":830.7142791748047,
    "y":268.85713958740234,
    "wires":[

    ]
  },
  {
    "id":"b9065e5.f46f9a",
    "type":"debug",
    "name":"Debug",
    "active":true,
    "complete":"false",
    "x":1123.7142791748047,
    "y":33.857139587402344,
    "wires":[

    ]
  },
  {
    "id":"9f80d123.607f3",
    "type":"debug",
    "name":"Debug",
    "active":true,
    "complete":"false",
    "x":1400.7142791748047,
    "y":235.85713958740234,
    "wires":[

    ]
  },
  {
    "id":"c047790a.3fb888",
    "type":"debug",
    "name":"Debug",
    "active":true,
    "complete":"false",
    "x":1123.7142791748047,
    "y":173.85713958740234,
    "wires":[

    ]
  },
  {
    "id":"8d5132df.72aed",
    "type":"debug",
    "name":"Debug",
    "active":true,
    "complete":"false",
    "x":941.7142791748047,
    "y":124.85713958740234,
    "wires":[

    ]
  },
  {
    "id":"fab7e7ba.054818",
    "type":"debug",
    "name":"Debug",
    "active":true,
    "complete":"false",
    "x":665.7142791748047,
    "y":18.571436882019043,
    "wires":[

    ]
  }
]
