[
  {
    "id":"84106315.1f7938",
    "type":"inject",
    "name":"Debug puzzle",
    "topic":"",
    "payload":"000000010400000000020000000000050407008000300001090000300400200050100000000806000",
    "repeat":"",
    "crontab":"",
    "once":false,
    "x":199.26984405517578,
    "y":44.523813247680664,
    "wires":[
      [
        "31bafc7f.ce76c4"
      ]
    ]
  },
  {
    "id":"bb373141.93898",
    "type":"function",
    "name":"Parse puzzle",
    "func":"\ntry {\n\n    var line = msg.payload.puzzle.line;\n\n    var sectorDimension = Math.pow(line.length, 1/4);\n\n    if (Math.floor(sectorDimension) !== sectorDimension ||\n        sectorDimension > 3) {\n\n        throw \"Cannot make a grid from \" + line.length + \" characters\";\n    }\n\n    var grid = new context.global.sudoku.Grid(sectorDimension);\n\n    for (var index = 0; index < line.length; ++index) {\n\n        if (line[index] === \".\" || line[index] === \"0\") continue;\n\n        var number = parseInt(line[index]);\n\n        if (isNaN(number)) throw \"Cannot parse \" + line[index];\n\n        var rowIndex = Math.floor(index / grid.dimension);\n\n        var colIndex = index % grid.dimension;\n\n        grid.setSquareValue(colIndex, rowIndex, number);\n    }\n\n    msg.payload = [grid];\n\n    return [msg, null];\n}\ncatch (message) {\n\n    msg.payload = message;\n\n    return [null, msg];\n}",
    "outputs":"2",
    "x":509.2698211669922,
    "y":64.74604034423828,
    "wires":[
      [
        "a58a856b.5a7578",
        "fab7e7ba.054818"
      ],
      [
        "cc28df94.33d72"
      ]
    ]
  },
  {
    "id":"ff3b4cee.409598",
    "type":"http in",
    "name":"POST",
    "url":"/sudoku/puzzle/solve",
    "method":"post",
    "x":54.26984405517578,
    "y":68.52381324768066,
    "wires":[
      [
        "53c729de.ac38d8"
      ]
    ]
  },
  {
    "id":"861d381.b07acc8",
    "type":"http in",
    "name":"PUT",
    "url":"/sudoku/puzzle/solve",
    "method":"put",
    "x":54.26984405517578,
    "y":108.52381324768066,
    "wires":[
      [
        "53c729de.ac38d8"
      ]
    ]
  },
  {
    "id":"31bafc7f.ce76c4",
    "type":"function",
    "name":"Load grid code",
    "func":"\n// Constructs a square with all values from 1 to the given\n// number as possibilities if a integer is provided. If a\n// square is provided a new copy of that square is created\n//\nvar Square = function(param) {\n\n    this.possibilities =  {};\n\n    if (typeof(param) === \"number\") {\n\n        if (param < 1) {\n\n            throw \"Cannot create a square with a\" +\n                  \" maximum possibility of \" + param;\n        }\n\n        for (var i = 1; i <= param; ++i) {\n\n            this.possibilities[i] = true;\n        }\n    }\n    else {\n\n        for (var possibility in param.possibilities) {\n\n            this.possibilities[possibility] = true;\n        }\n    }\n};\n\nSquare.prototype = { // The public methods of a square\n\n    // Returns true if the possibility existed before it was removed\n    //\n    removePossibility: function(possibility) {\n    \n        var hadPossibility = possibility in this.possibilities;\n        \n        delete this.possibilities[possibility];\n        \n        return hadPossibility;\n    },\n\n    // Returns false if the square has no possible values\n    //\n    isPossible: function() {\n    \n        return Object.keys(this.possibilities).length !== 0;\n    },\n    \n    // Returns the value of the square if it has only\n    // a single possibility and undefined otherwise\n    //\n    getValue: function() {\n\n        var keys = Object.keys(this.possibilities);\n\n        if (keys.length === 1) return keys[0];\n    },\n\n    // Sets this square to only contain the given value as a possibility\n    //\n    setValue: function(value) {\n\n        this.possibilities = {};\n\n        this.possibilities[value] = true;\n    },\n\n    // Returns an array of the possible values for this square\n    //\n    getPossibilities: function() {\n\n        return Object.keys(this.possibilities);\n    },\n\n    hasPossibility: function(value) {\n\n        return value in this.possibilities;\n    }\n};\n\n// Creates a sudoku grid with the given sector\n// dimenions, so the width of the grid will be\n// this value squared and the total number of\n// squares will be this value pow'd by four\n// Each square starts with all possible values\n//\nvar Grid = function(sectorDimension) {\n\n    if (sectorDimension < 1) {\n\n        throw \"Sector size must be greater than zero\";\n    }\n\n    this.rows = [];\n\n    this.sectorDimension = sectorDimension;\n\n    this.dimension = Math.pow(sectorDimension, 2);\n\n    for (var rowIndex = 0; rowIndex < this.dimension; ++rowIndex) {\n\n        var row = [];\n\n        for (var colIndex = 0; colIndex < this.dimension; ++colIndex) {\n\n            row.push(new Square(this.dimension));\n        }\n\n        this.rows.push(row);\n    }\n};\n\nGrid.prototype = { // The public methods of a square\n\n    // Returns an array of objects each with a rowIndex and colIndex\n    // property pertaining to all squares in the same sector of the\n    // square at the given indexes but exclusing the square itself\n    //\n    getOtherIndexesInSameSector: function(colIndex, rowIndex) {\n\n        var sectorRowIndex = Math.floor(rowIndex / this.sectorDimension);\n        var sectorColIndex = Math.floor(colIndex / this.sectorDimension);\n\n        var indexes = [];\n\n        for (var y = this.sectorDimension * sectorRowIndex;\n             y < this.sectorDimension * (sectorRowIndex + 1);\n             ++y) {\n\n            for (var x = this.sectorDimension * sectorColIndex;\n                 x < this.sectorDimension * (sectorColIndex + 1);\n                 ++x) {\n\n                if (x !== colIndex || y !== rowIndex) {\n\n                    indexes.push({ colIndex: x,\n                                   rowIndex: y });\n                }\n            }\n        }\n\n        return indexes;\n    },\n\n    // Removes a possible value from a square and all 'related'\n    // squares if the squares value becomes certain\n    //\n    removePossibility: function(colIndex, rowIndex, possibility) {\n\n        var square = this.rows[rowIndex][colIndex];\n\n        if (square.removePossibility(possibility)) {\n\n            var value = square.getValue();\n\n            if (typeof(value) !== \"undefined\") {\n\n                this.removeRelatedPossibilities(colIndex, rowIndex, value);\n            }\n        }\n    },\n\n    // Remove this possible value from 'related'\n    // squares but not the square itself\n    //\n    removeRelatedPossibilities: function(colIndex, rowIndex, possibility) {\n\n        // Start with the square's row\n        //\n        for (var x = 0; x < this.dimension; ++x) {\n        \n            if (x !== colIndex) {\n\n                this.removePossibility(x, rowIndex, possibility);\n            }\n        }\n\n        // Then squares that are in the same column\n        //\n        for (var y = 0; y < this.dimension; ++y) {\n\n            if (y !== rowIndex) {\n\n                this.removePossibility(colIndex, y, possibility);\n            }\n        }\n\n        // Then squares that are in the same sector\n        //\n        var indexes = this.getOtherIndexesInSameSector(colIndex, rowIndex);\n\n        for (var i = 0; i < indexes.length; ++i) {\n\n            this.removePossibility(indexes[i].colIndex,\n                                   indexes[i].rowIndex,\n                                   possibility);\n        }\n    },\n\n    // Sets a square to have a single possibility\n    //\n    setSquareValue: function(colIndex, rowIndex, value) {\n\n        if (colIndex < 0 || colIndex > this.dimension) {\n\n            throw \"Column \" + colIndex + \" doesn't exist\";\n        }\n\n        if (rowIndex < 0 || rowIndex > this.dimension) {\n\n            throw \"Row \" + rowIndex + \" doesn't exist\";\n        }\n\n        this.rows[rowIndex][colIndex].setValue(value);\n\n        this.removeRelatedPossibilities(colIndex, rowIndex, value);\n    },\n\n    // Passes squares to the given predicate. Returns false if\n    // the predicate returns false for any squares in the grid\n    //\n    isTrueForAllSquares: function(predicateFunc) {\n\n        for (var y = 0; y < this.dimension; ++y) {\n\n            for (var x = 0; x < this.dimension; ++x) {\n\n                if (!predicateFunc(this.rows[y][x])) {\n\n                    return false;\n\n                }\n            }\n        }\n\n        return true;\n    }\n};\n\ncontext.global.sudoku = { Grid: Grid };\n\nreturn msg;",
    "outputs":1,
    "x":353.1587219238281,
    "y":64.74603843688965,
    "wires":[
      [
        "bb373141.93898"
      ]
    ]
  },
  {
    "id":"457c51c0.e5f4",
    "type":"function",
    "name":"Refine top grid",
    "func":"\n// TODO: Here we need to find a refinement on the\n// first grid provided if it isn't already and is\n// still possible. Once a refinement is found the\n// first output can be taken to cause a refinement\n// loop. If no refinement is found the second\n// output should be taken to cause the grid to be\n// split. If the grid is complete or isn't\n// possible then second output should be taken\n\n// TODO: Is this doing to much?\n// Can we split the possible/complete checks into\n// their own nodes?\n\n// TODO: Can we split the deduction steps into their own nodes?\n\nreturn null;",
    "outputs":"2",
    "x":739.2698211669922,
    "y":184.74605560302734,
    "wires":[
      [
        "a58a856b.5a7578",
        "8d5132df.72aed"
      ],
      [
        "65685430.9163f4"
      ]
    ]
  },
  {
    "id":"65685430.9163f4",
    "type":"function",
    "name":"Split top grid",
    "func":"\nreturn null;",
    "outputs":"1",
    "x":920.2698211669922,
    "y":190.74605560302734,
    "wires":[
      [
        "a58a856b.5a7578",
        "c047790a.3fb888"
      ]
    ]
  },
  {
    "id":"53c729de.ac38d8",
    "type":"function",
    "name":"Parse request",
    "func":"\nmsg.payload = msg.req.body.puzzle;\n\nreturn msg;",
    "outputs":1,
    "x":196.26984405517578,
    "y":85.52381324768066,
    "wires":[
      [
        "31bafc7f.ce76c4",
        "186801db.e797fe"
      ]
    ]
  },
  {
    "id":"a58a856b.5a7578",
    "type":"function",
    "name":"Top grid complete?",
    "func":"\nreturn null;",
    "outputs":"2",
    "x":742.7142791748047,
    "y":58.857139587402344,
    "wires":[
      [
        "e79c6ce.f18639"
      ],
      [
        "7c9af193.83651"
      ]
    ]
  },
  {
    "id":"7c9af193.83651",
    "type":"function",
    "name":"Top grid possible?",
    "func":"\nreturn null;",
    "outputs":"2",
    "x":562.7142791748047,
    "y":201.85713958740234,
    "wires":[
      [
        "457c51c0.e5f4"
      ],
      [
        "814c74a8.7eb388",
        "415aa01b.bea56"
      ]
    ]
  },
  {
    "id":"814c74a8.7eb388",
    "type":"function",
    "name":"Discard top grid",
    "func":"\nmsg.payload.shift();\n\nreturn msg;",
    "outputs":1,
    "x":849.7142791748047,
    "y":229.85713958740234,
    "wires":[
      [
        "a8e13d13.571ec"
      ]
    ]
  },
  {
    "id":"a8e13d13.571ec",
    "type":"function",
    "name":"Any grids left?",
    "func":"\nreturn msg.payload.length > 0 ? [ msg, null ]\n                              : [ null, msg ];",
    "outputs":"2",
    "x":1025.7142791748047,
    "y":229.85713958740234,
    "wires":[
      [
        "a58a856b.5a7578"
      ],
      [
        "39ef8cf2.c61074"
      ]
    ]
  },
  {
    "id":"e79c6ce.f18639",
    "type":"function",
    "name":"Format solution",
    "func":"\n// TODO: Should check if we have an open HTTP\n// request and take the second branch only if\n// there is one? Or can we just take it anyway?\n\nreturn null;",
    "outputs":1,
    "x":944.0010223388672,
    "y":52.99700164794922,
    "wires":[
      [
        "1ce91733.e316e9",
        "b9065e5.f46f9a"
      ]
    ]
  },
  {
    "id":"39ef8cf2.c61074",
    "type":"function",
    "name":"Negative response",
    "func":"\nmsg.statusCode = 204;\n\nmsg.payload = { error: \"Puzzle had no solution\" };\n\nreturn msg;",
    "outputs":1,
    "x":1224.7142791748047,
    "y":235.85713958740234,
    "wires":[
      [
        "1ce91733.e316e9",
        "9f80d123.607f3"
      ]
    ]
  },
  {
    "id":"1ce91733.e316e9",
    "type":"http response",
    "name":"HTTP response",
    "x":1144.7913055419922,
    "y":71.62635803222656,
    "wires":[

    ]
  },
  {
    "id":"14fd4a8b.eb02b5",
    "type":"http response",
    "name":"HTTP response",
    "x":364.7142791748047,
    "y":170.85713958740234,
    "wires":[

    ]
  },
  {
    "id":"cc28df94.33d72",
    "type":"function",
    "name":"Bad request",
    "func":"\nmsg.statusCode = 400;\n\nmsg.payload = { error: \"Invalid puzzle\" };\n\nreturn msg;",
    "outputs":"1",
    "x":208.7142791748047,
    "y":189.85713958740234,
    "wires":[
      [
        "14fd4a8b.eb02b5",
        "f71b04a3.08e4f8"
      ]
    ]
  },
  {
    "id":"186801db.e797fe",
    "type":"debug",
    "name":"Debug",
    "active":true,
    "complete":"false",
    "x":334.7142791748047,
    "y":102.85713958740234,
    "wires":[

    ]
  },
  {
    "id":"f71b04a3.08e4f8",
    "type":"debug",
    "name":"Debug",
    "active":true,
    "complete":"false",
    "x":344.7142791748047,
    "y":209.85713958740234,
    "wires":[

    ]
  },
  {
    "id":"415aa01b.bea56",
    "type":"debug",
    "name":"Debug",
    "active":true,
    "complete":"false",
    "x":830.7142791748047,
    "y":268.85713958740234,
    "wires":[

    ]
  },
  {
    "id":"b9065e5.f46f9a",
    "type":"debug",
    "name":"Debug",
    "active":true,
    "complete":"false",
    "x":1123.7142791748047,
    "y":33.857139587402344,
    "wires":[

    ]
  },
  {
    "id":"9f80d123.607f3",
    "type":"debug",
    "name":"Debug",
    "active":true,
    "complete":"false",
    "x":1400.7142791748047,
    "y":235.85713958740234,
    "wires":[

    ]
  },
  {
    "id":"c047790a.3fb888",
    "type":"debug",
    "name":"Debug",
    "active":true,
    "complete":"false",
    "x":1123.7142791748047,
    "y":173.85713958740234,
    "wires":[

    ]
  },
  {
    "id":"8d5132df.72aed",
    "type":"debug",
    "name":"Debug",
    "active":true,
    "complete":"false",
    "x":941.7142791748047,
    "y":124.85713958740234,
    "wires":[

    ]
  },
  {
    "id":"fab7e7ba.054818",
    "type":"debug",
    "name":"Debug",
    "active":true,
    "complete":"false",
    "x":665.7142791748047,
    "y":18.571436882019043,
    "wires":[

    ]
  }
]
