[
  {
    "id":"84106315.1f7938",
    "type":"inject",
    "name":"Debug puzzle",
    "topic":"",
    "payload":"000000010400000000020000000000050407008000300001090000300400200050100000000806000",
    "repeat":"",
    "crontab":"",
    "once":false,
    "x":203.5555648803711,
    "y":31.66667366027832,
    "wires":[
      [
        "31bafc7f.ce76c4"
      ]
    ]
  },
  {
    "id":"bb373141.93898",
    "type":"function",
    "name":"Parse puzzle",
    "func":"\n// TODO: Turn the puzzle into a grid. This\n// requires having a global notion of a of \n// a grid complete with basic possibility\n// elimination functionality. This code will\n// have to live either outside the flow or be\n// added during the flow to the global context\n\n// TODO: In the future allow the puzzle to be\n// either a line or a grid array of arrays.\n// Each could be in their own function node\n\n// TODO: Take second branch if the puzzle is invalid\n\nreturn null;",
    "outputs":"2",
    "x":513.5555419921875,
    "y":51.88890075683594,
    "wires":[
      [
        "a58a856b.5a7578"
      ],
      [
        "cc28df94.33d72"
      ]
    ]
  },
  {
    "id":"ff3b4cee.409598",
    "type":"http in",
    "name":"POST",
    "url":"/sudoku/puzzle/solve",
    "method":"post",
    "x":58.555564880371094,
    "y":55.66667366027832,
    "wires":[
      [
        "53c729de.ac38d8"
      ]
    ]
  },
  {
    "id":"861d381.b07acc8",
    "type":"http in",
    "name":"PUT",
    "url":"/sudoku/puzzle/solve",
    "method":"put",
    "x":58.555564880371094,
    "y":95.66667366027832,
    "wires":[
      [
        "53c729de.ac38d8"
      ]
    ]
  },
  {
    "id":"31bafc7f.ce76c4",
    "type":"function",
    "name":"Load grid code",
    "func":"\n// TODO: Perhaps the shared notion and\n// functionality of a grid should be\n// added to the global context here?\n\nreturn msg;",
    "outputs":1,
    "x":357.44444274902344,
    "y":51.888898849487305,
    "wires":[
      [
        "bb373141.93898"
      ]
    ]
  },
  {
    "id":"457c51c0.e5f4",
    "type":"function",
    "name":"Refine top grid",
    "func":"\n// TODO: Here we need to find a refinement on the\n// first grid provided if it isn't already and is\n// still possible. Once a refinement is found the\n// first output can be taken to cause a refinement\n// loop. If no refinement is found the second\n// output should be taken to cause the grid to be\n// split. If the grid is complete or isn't\n// possible then second output should be taken\n\n// TODO: Is this doing to much?\n// Can we split the possible/complete checks into\n// their own nodes?\n\n// TODO: Can we split the deduction steps into their own nodes?\n\nreturn null;",
    "outputs":"2",
    "x":743.5555419921875,
    "y":171.888916015625,
    "wires":[
      [
        "a58a856b.5a7578"
      ],
      [
        "65685430.9163f4"
      ]
    ]
  },
  {
    "id":"65685430.9163f4",
    "type":"function",
    "name":"Split top grid",
    "func":"\nreturn null;",
    "outputs":"1",
    "x":924.5555419921875,
    "y":177.888916015625,
    "wires":[
      [
        "a58a856b.5a7578"
      ]
    ]
  },
  {
    "id":"53c729de.ac38d8",
    "type":"function",
    "name":"Parse request",
    "func":"\nvar request = msg.req.body;\n\nmsg.payload = request.puzzle;\n\nreturn msg;",
    "outputs":1,
    "x":200.5555648803711,
    "y":72.66667366027832,
    "wires":[
      [
        "31bafc7f.ce76c4"
      ]
    ]
  },
  {
    "id":"a58a856b.5a7578",
    "type":"function",
    "name":"Top grid complete?",
    "func":"\nreturn null;",
    "outputs":"2",
    "x":747,
    "y":46,
    "wires":[
      [
        "e79c6ce.f18639"
      ],
      [
        "7c9af193.83651"
      ]
    ]
  },
  {
    "id":"7c9af193.83651",
    "type":"function",
    "name":"Top grid possible?",
    "func":"\nreturn null;",
    "outputs":"2",
    "x":567,
    "y":189,
    "wires":[
      [
        "457c51c0.e5f4"
      ],
      [
        "814c74a8.7eb388"
      ]
    ]
  },
  {
    "id":"814c74a8.7eb388",
    "type":"function",
    "name":"Discard top grid",
    "func":"\nreturn null;",
    "outputs":1,
    "x":854,
    "y":217,
    "wires":[
      [
        "a8e13d13.571ec"
      ]
    ]
  },
  {
    "id":"a8e13d13.571ec",
    "type":"function",
    "name":"Any grids left?",
    "func":"\nreturn null;",
    "outputs":"2",
    "x":1030,
    "y":217,
    "wires":[
      [
        "a58a856b.5a7578"
      ],
      [
        "39ef8cf2.c61074"
      ]
    ]
  },
  {
    "id":"e79c6ce.f18639",
    "type":"function",
    "name":"Format solution",
    "func":"\n// TODO: Should check if we have an open HTTP\n// request and take the second branch only if\n// there is one? Or can we just take it anyway?\n\nreturn null;",
    "outputs":1,
    "x":948.2867431640625,
    "y":40.139862060546875,
    "wires":[
      [
        "1ce91733.e316e9"
      ]
    ]
  },
  {
    "id":"39ef8cf2.c61074",
    "type":"function",
    "name":"Negative response",
    "func":"\n// TODO: Should check if we have an open HTTP\n// request and take the second branch only if\n// there is one? Or can we just take it anyway?\n\nreturn null;",
    "outputs":1,
    "x":1229,
    "y":223,
    "wires":[
      [
        "1ce91733.e316e9"
      ]
    ]
  },
  {
    "id":"1ce91733.e316e9",
    "type":"http response",
    "name":"HTTP response",
    "x":1145.0770263671875,
    "y":39.76921844482422,
    "wires":[

    ]
  },
  {
    "id":"14fd4a8b.eb02b5",
    "type":"http response",
    "name":"HTTP response",
    "x":366,
    "y":177,
    "wires":[

    ]
  },
  {
    "id":"cc28df94.33d72",
    "type":"function",
    "name":"Bad request",
    "func":"\nreturn null;",
    "outputs":"1",
    "x":213,
    "y":177,
    "wires":[
      [
        "14fd4a8b.eb02b5"
      ]
    ]
  }
]
