
        xdef    getSquarePointer
        xdef    blockUntilBlitterIdle
        xdef    cloneChipMemoryGrid
        xdef    squareHasPossibility
        xdef    getPossibilityCount
        xdef    getSquareValue
        xdef    isPossible
        xdef    isComplete
        
GrdSize equ     12
GrdCace equ     8
SqrCace equ     2

DimSize equ     2

TotSize equ     0
SqrSize equ     2
ImpSqrs equ     4
IncSqrs equ     6

PosCont equ     0
SqrVal  equ     1

getSquareOffset macro
        moveq   #0,d0
        move.w  (sp)+,d0
        move.w  (sp)+,d1
        move.l  (sp)+,a1
        mulu    SqrSize(a1),d0
        add.w   d1,d0
        mulu    GrdSize+DimSize(a1),d0
        add.w   #\1+GrdSize+GrdCace,d0
        endm

getSquarePointer
        move.l  (sp)+,a0
        getSquareOffset 0
        add.l   a1,d0
        jmp     (a0)
        
BLTSET  equ     $8000
BLTCLR  equ     $0000
BLTPRI  equ     $0400
DMACON  equ     $dff096
BLTCON0 equ     $dff040
BLTAMOD equ     $dff064
BLTAFWM equ     $dff044
BLTAPTH equ     $dff050
BLTDPTH equ     $dff054
BLTSIZE equ     $dff058

blockUntilBlitterIdle
        move.l  (sp)+,a0
        move.w  #BLTSET|BLTPRI,DMACON
        move.w  #BLTCLR|BLTPRI,DMACON
        jmp     (a0)
      
cloneChipMemoryGrid
        movem.l (sp)+,d0/a0/a1
        move.l  (a1)+,(a0)+
        move.l  (a1)+,(a0)+
        move.l  (a1)+,(a0)+
        move.w  #BLTSET|BLTPRI,DMACON
        move.w  #BLTCLR|BLTPRI,DMACON
        move.l  #$09f00000,BLTCON0
        move.l  #0,BLTAMOD
        move.l  #$ffffffff,BLTAFWM
        move.l  a1,BLTAPTH
        move.l  a0,BLTDPTH
        move.w  TotSize(a1),d1
        sub.w   #GrdSize,d1
        lsl.w   #4,d1
        addq.w  #2,d1
        move.w  d1,BLTSIZE
        ;move.w  #BLTCLR|BLTPRI,DMACON
        move.l  d0,a0
        jmp     (a0)
        
squareHasPossibility
        move.l  (sp)+,a0
        move.w  (sp)+,d1
        swap    d1
        getSquareOffset SqrCace
        add.l   d0,a1
        clr.w   d1
        swap    d1
        subq.w  #1,d1
        move.l  d1,d0
        lsr.w   #3,d1
        add.l   d1,a1
        and.w   #8-1,d0
        btst.b  d0,(a1)
        sne     d0
        jmp     (a0)

getSquareCachedValue macro
        move.l  (sp)+,a0
        getSquareOffset \1
        add.l   d0,a1
        moveq   #0,d0
        move.b  (a1),d0
        jmp     (a0)
        endm

getPossibilityCount
        getSquareCachedValue PosCont

getSquareValue
        getSquareCachedValue SqrVal

isGridCachedValueZero macro
        movem.l (sp)+,a0/a1
        tst.w   \1+GrdSize(a1)
        seq     d0
        jmp     (a0)
        endm

isPossible
        isGridCachedValueZero ImpSqrs
        
isComplete
        isGridCachedValueZero IncSqrs

end