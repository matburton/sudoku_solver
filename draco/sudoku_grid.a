
        xdef    getSquarePointer
        xdef    cloneIntoGrid
        xdef    squareHasPossibility
        xdef    getPossibilityCount
        xdef    getSquareValue
        xdef    isPossible
        xdef    isComplete
        xdef    mustBeValueByRow
        xdef    mustBeValueByColumn
        
        xref    CopyMemQuick
        
GRID_DIMENSION              equ 2
GRID_SIZE                   equ 12
GRID_SQUARE_SIZE            equ 14
GRID_IMPOSSIBLE_SQUARES     equ 16
GRID_INCOMPLETE_SQUARES     equ 18
GRID_FIRST_SQUARE           equ 20
SQUARE_POSSIBILITY_COUNT    equ 0
SQUARE_VALUE                equ 1
SQUARE_POSSIBILITY_PACK     equ 2

getSquareOffset macro
        move.w  (sp)+,d0
        move.w  (sp)+,d1
        move.l  (sp)+,a1
        mulu    GRID_DIMENSION(a1),d0
        add.w   d1,d0
        mulu    GRID_SQUARE_SIZE(a1),d0
        add.w   #\1+GRID_FIRST_SQUARE,d0
        endm

getSquarePointer
        move.l  (sp)+,a0
        getSquareOffset 0
        add.l   a1,d0
        jmp     (a0)
        
cloneIntoGrid
        move.l  (sp)+,a0
        move.l  4(sp),a1
        move.w  GRID_SIZE(a1),-(sp)
        move.w  #0,-(sp)
        move.l  a0,-(sp)
        jmp     CopyMemQuick
        
getBitIndexAndBumpPtr macro
        add.l   d0,a1
        clr.w   d1
        swap    d1
        subq.w  #1,d1
        move.l  d1,d0
        lsr.w   #3,d1
        add.l   d1,a1
        and.w   #8-1,d0
        endm
        
squareHasPossibility
        move.l  (sp)+,a0
        move.w  (sp)+,d1
        swap    d1
        getSquareOffset SQUARE_POSSIBILITY_PACK
        getBitIndexAndBumpPtr
        btst.b  d0,(a1)
        sne     d0
        jmp     (a0)

getSquareCachedValue macro
        move.l  (sp)+,a0
        getSquareOffset \1
        add.l   d0,a1
        moveq   #0,d0
        move.b  (a1),d0
        jmp     (a0)
        endm

getPossibilityCount
        getSquareCachedValue SQUARE_POSSIBILITY_COUNT

getSquareValue
        getSquareCachedValue SQUARE_VALUE

isGridCachedValueZero macro
        movem.l (sp)+,a0/a1
        tst.w   \1(a1)
        seq     d0
        jmp     (a0)
        endm

isPossible
        isGridCachedValueZero GRID_IMPOSSIBLE_SQUARES
        
isComplete
        isGridCachedValueZero GRID_INCOMPLETE_SQUARES
        
mustBeValueByRow
        move.l  (sp)+,a0 ; - Pop return address
        move.w  (sp)+,d1 ; - Pop possibility value to high
        swap    d1       ;   bits for getBitIndexAndBumpPtr
        move.w  (sp)+,d0 ; - Pop y index
        move.w  (sp)+,d1 ; - Pop x index to low bits
        move.l  (sp)+,a1 ; - Pop grid address
        move.l  a0,-(sp) ; - Push return address
        move.w  d1,-(sp) ; - Push x index
        addq.w  #1,d0    ; - +1 y to at next row to work backwards
        mulu    GRID_DIMENSION(a1),d0                         ; - getSquareOffset without using
        mulu    GRID_SQUARE_SIZE(a1),d0                       ;   x leaving offset to square
        add.w   #SQUARE_POSSIBILITY_PACK+GRID_FIRST_SQUARE,d0 ;   after the last in row in d0
        move.l  a1,a0         ; - Copy grid address
        getBitIndexAndBumpPtr ; - Leave bit index in d0 and move a1 to correct byte
        move.w  GRID_DIMENSION(a0),d1   ; - Create loop counter in d1
        subq.w  #1,d1                   ;   as the grid dimension - 1
        move.w  GRID_SQUARE_SIZE(a0),a0 ; - Cache square size
nxtCol: sub.w   a0,a1                   ; - Move to previous square
        btst.b  d0,(a1)                 ; - Test if it has the value
        dbne    d1,nxtCol               ; - Loop if it doesn't
        cmp.w   (sp),d1                 ; - Continue the loop if this
        dbne    d1,nxtCol               ;   was the original x index
        tst.w   d1                      ; - Set return value to 1 if
        smi     d0                      ;   we ran through full row
        addq.w  #2,sp                   ; - Pop x index off the stack
        rts
        
mustBeValueByColumn
        move.l  (sp)+,a0 ; - Pop return address
        move.w  (sp)+,d1 ; - Pop possibility value to high
        swap    d1       ;   bits for getBitIndexAndBumpPtr
        move.w  (sp)+,d0 ; - Pop y index
        move.w  (sp)+,d1 ; - Pop x index to low bits
        move.l  (sp)+,a1 ; - Pop grid address
        move.l  a0,-(sp) ; - Push return address
        move.w  d0,-(sp) ; - Push y index
        move.w  GRID_DIMENSION(a1),d0 ; - getSquareOffset at row past bottom of grid
        mulu    d0,d0                 ;   to work backwards, offset to square after
        add.w   d1,d0                 ;   the last row in the correct column in d0
        mulu    GRID_SQUARE_SIZE(a1),d0
        add.w   #SQUARE_POSSIBILITY_PACK+GRID_FIRST_SQUARE,d0
        move.l  a1,a0         ; - Copy grid address
        getBitIndexAndBumpPtr ; - Leave bit index in d0 and move a1 to correct byte
        move.w  GRID_SQUARE_SIZE(a0),d1 ; - Prepare the offset
        mulu    GRID_DIMENSION(a0),d1   ;   to move up column
        move.w  GRID_DIMENSION(a0),a0   ; - Create loop counter
        exg     d1,a0                   ; - Swap registers over
        subq.w  #1,d1                   ; - -1 loop counter to start
nxtRow: sub.w   a0,a1                   ; - Move to previous square
        btst.b  d0,(a1)                 ; - Test if it has the value
        dbne    d1,nxtRow               ; - Loop if it doesn't
        cmp.w   (sp),d1                 ; - Continue the loop if this
        dbne    d1,nxtRow               ;   was the original y index
        tst.w   d1                      ; - Set return value to 1 if
        smi     d0                      ;   we ran through full row
        addq.w  #2,sp                   ; - Pop y index off the stack
        rts
        
        end