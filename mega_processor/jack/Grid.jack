
class Grid {

    function int gridByteSize() { return 0; }

    function Array initialise(Array grid) { return 0; }

    function void copyFromTo(Array source, Array target) { return; }

    // Cannot be used to stop isImpossible returning false
    //
    // Assumes the square has the given value as a possibility
    // and is incomplete, i.e. has at least one other possibility
    //
    function void setSquareValue(Array grid, int value, int x, int y) { return; }
    
    function boolean squareHasPossibility(Array grid, int value, int x, int y) { return false; }

    // Returns the new square value if the square was previously incomplete,
    // i.e. had multiple possibilities, but now only has one. Otherwise
    // returns zero, e.g. if the square is still incomplete or did not have
    // the given value as a possibility
    //
    function int removeSquarePossibility(Array grid, int value, int x, int y) { return 0; }

    function int getPossibilityCount(Array grid, int x, int y) { return 0; }
    
    // Returns 0 if the square has multiple possibilities or no possibilities
    //
    function int getSquareValue(Array grid, int x, int y) { return 0; }
    
    // Once this returns false it will always return false
    // Using setSquareValue cannot make this return true again
    //
    function boolean isImpossible(Array grid) { return false; }

    function boolean isComplete(Array grid) { return false; }
    
    function boolean mustBeValue(Array grid, int value, int x, int y) {
    
        var int mask;
        
        let mask = Grid.toMask(value);
        
        if (Grid.mustBeValueByRow(grid, mask, x, y)) { return true; }
        
        if (Grid.mustBeValueByColumn(grid, mask, x, y)) { return true; }
        
        if (Grid.mustBeValueBySector(grid, mask, x, y)) { return true; }
        
        return false;
    }
    
    function boolean mustBeValueByRow(Array grid, int mask, int x, int y) { return false; }
    
    function boolean mustBeValueByColumn(Array grid, int mask, int x, int y) {
    
        var Array square;
        
        var int index;
        
        let square = Grid.getSquare(grid, x, 0);
        
        let index = 0;
    
        while (index < 9) {

            if (~(index = y) & square[0] & mask) {
            
                return false;
            }
        
            let index = index + 1;
            
            let square = square + 36;
        }
    
        return true;
    }
    
    function boolean mustBeValueBySector(Array grid, int mask, int x, int y) {
        
        var Array square, ignoreSquare;
        
        var int index;
        
        let square = Grid.getSquare(grid, x / 3 * 3, y / 3 * 3);
        
        let ignoreSquare = Grid.getSquare(grid, x, y);
        
        let index = 0;
        
        while (index < 9) {
        
            if (~(square = ignoreSquare) & square[0] & mask) {
                       
                return false;
            }
            
            if (index = 2 | (index = 5)) {
            
                let square = square + 28;
            }
            else {
            
                let square = square + 4;
            }
            
            let index = index + 1;
        }
        
        return true;
    }
    
    function Array getSquare(Array grid, int x, int y) { return 0; }

    function int toMask(int value) { return 0; }
}