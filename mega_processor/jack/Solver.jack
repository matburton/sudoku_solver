
class Solver {
    
    function void setHintAt(Array grid, int value, int x, int y) { return; }
    
    function void refineGrid(Array grid) { return; }
    
    // Returns the number of solutions found so far
    //
    function int splitGridAt(Array grid, int x, int y) { return 0; }
    
    // Returns the number of solutions found so far
    //
    function int splitGrid(Array grid) {
 
        var int x, y, count, bestCount, bestX, bestY;
        
        let bestCount = 0;
        
        let y = 0;
        
        while (y < 9) {
        
            let x = 0;
            
            while (x < 9) {
            
                let count = Grid.getPossibilityCount(grid, x, y);
                
                if (count > 1) {
                
                    if (0 = bestCount | (count < bestCount)) {
                    
                        let bestCount = count;
                        
                        let bestX = x;
                        let bestY = y;
                    }
                }
            
                let x = x + 1;
            }
        
            let y = y + 1;
        }
        
        return Solver.splitGridAt(grid, bestX, bestY);
    }
    
    // Returns the number of solutions found so far
    //
    function int solve(Array grid) {
    
        var int solutions;
    
        if (Grid.isImpossible(grid)) { return 0; }

        let solutions = 0;        
    
        while (solutions < 2) {
        
            do Solver.refineGrid(grid);
          
            if (Grid.isComplete(grid)) {
            
                if (solutions = 0) {
                
                    do Leds.addGridRenderDisable();
                
                    do Leds.renderMessage(1);
                }
            
                return solutions + 1;
            }
            
            if (Grid.isImpossible(grid)) { return solutions; }

            let solutions = Solver.splitGrid(grid) + solutions;
        }
    
        return solutions;
    }
}