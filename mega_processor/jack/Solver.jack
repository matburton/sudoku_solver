
class Solver {
   
    function void removePossibilityAt(Array grid, int value, int x, int y) { return; }
    
    function void setValueAt(Array grid, int value, int x, int y) { return; }
    
    function void refineGrid(Array grid) { return; }
    
    function int getAPossibilityAt(Array grid, int x, int y) { return 0; }
    
    // Returns the number of solutions found so far
    //
    function int splitGrid(Array grid) {
    
        var Array cloneGrid;
    
        var int x, y, count, possibility, bestCount, bestX, bestY;
        
        let cloneGrid = Stack.grow(Grid.gridByteSize());
        
        let bestCount = 0;
        
        let y = 0;
        
        while (y < 9) {
        
            let x = 0;
            
            while (x < 9) {
            
                let count = Grid.getPossibilityCount(grid, x, y);
                
                if (count > 1) {
                
                    if (0 = bestCount | (count < bestCount)) {
                    
                        let bestCount = count;
                        
                        let bestX = x;
                        let bestY = y;
                    }
                }
            
                let x = x + 1;
            }
        
            let y = y + 1;
        }
        
        let possibility = Solver.getAPossibilityAt(grid, bestX, bestY);
        
        do Grid.copyFromTo(grid, cloneGrid);
        
        do Leds.addGridRenderDisable();
        
        do Solver.removePossibilityAt(grid, possibility, bestX, bestY);
        
        do Leds.undoGridRenderDisable();
        
        if (Grid.isImpossible(grid)) {
        
            do Grid.copyFromTo(cloneGrid, grid);
            
            do Solver.setValueAt(grid, possibility, bestX, bestY);
            
            return 0;
        }
        
        do Solver.setValueAt(cloneGrid, possibility, bestX, bestY);
    
        let count = Solver.solve(cloneGrid);
        
        do Leds.renderGrid(grid);
        
        return count;
    }
    
    // Returns the number of solutions found so far
    //
    function int solve(Array grid) {
    
        var int solutions;
    
        if (Grid.isImpossible(grid)) { return 0; }

        let solutions = 0;        
    
        while (solutions < 2) {
        
            do Solver.refineGrid(grid);
          
            if (Grid.isComplete(grid)) {
            
                do Leds.addGridRenderDisable();
                
                do Leds.renderMessage(1);
            
                return solutions + 1;
            }
            
            if (Grid.isImpossible(grid)) { return solutions; }
            
            let solutions = Solver.splitGrid(grid);
        }
    
        return solutions;
    }
}